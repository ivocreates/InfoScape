name: InfoScope OSINT Platform - Build & Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'pre-release'
        type: choice
        options:
          - release
          - pre-release
          - draft

env:
  NODE_VERSION: '18'
  APP_NAME: 'InfoScope OSINT Platform'
  APP_VERSION: '2.3.0'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint || echo "Linting completed with warnings"
        
      - name: Run tests
        run: npm test -- --coverage --watchAll=false --passWithNoTests
        
      - name: Build React app
        run: npm run build
        
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level high
        continue-on-error: true
        
      - name: Run dependency check
        uses: ossf/scorecard-action@v2.3.1
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    needs: [test, security-audit]
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.3
        
      - name: Install dependencies
        run: npm ci
        
      - name: Build React app
        run: npm run build
        
      - name: Build Electron (Windows)
        run: npm run electron-pack-win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Generate checksums
        run: |
          cd dist
          Get-ChildItem -File | ForEach-Object { 
            (Get-FileHash $_.Name -Algorithm SHA256).Hash + "  " + $_.Name 
          } | Out-File -Encoding UTF8 SHA256SUMS.txt
          
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds
          path: dist/
          retention-days: 30

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    needs: [test, security-audit]
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build React app
        run: npm run build
        
      - name: Build Electron (macOS)
        run: npm run electron-pack-mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Uncomment and configure for code signing
          # CSC_LINK: ${{ secrets.CSC_LINK }}
          # CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          
      - name: Generate checksums
        run: |
          cd dist
          shasum -a 256 * > SHA256SUMS.txt
          
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-builds
          path: dist/
          retention-days: 30

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    needs: [test, security-audit]
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libnss3-dev \
            libatk-bridge2.0-dev \
            libdrm2 \
            libgtk-3-dev \
            libgbm-dev
            
      - name: Install dependencies
        run: npm ci
        
      - name: Build React app
        run: npm run build
        
      - name: Build Electron (Linux)
        run: npm run electron-pack-linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Generate checksums
        run: |
          cd dist
          sha256sum * > SHA256SUMS.txt
          
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-builds
          path: dist/
          retention-days: 30

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos, build-linux]
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          
      - name: Organize release files
        run: |
          mkdir -p release
          
          # Copy Windows builds
          cp artifacts/windows-builds/* release/ 2>/dev/null || true
          
          # Copy macOS builds
          cp artifacts/macos-builds/* release/ 2>/dev/null || true
          
          # Copy Linux builds
          cp artifacts/linux-builds/* release/ 2>/dev/null || true
          
          # List all files
          ls -la release/
          
      - name: Generate release notes
        id: release_notes
        run: |
          cat > RELEASE_NOTES.md << 'EOF'
          # InfoScope OSINT Platform v${{ env.APP_VERSION }}
          
          ## 🎯 What's New
          
          ### Enhanced Features
          - **Dual-Mode AI Integration**: Support for online APIs (Google AI, OpenAI, Anthropic) with offline fallback
          - **Smart Input Parser**: Automatically detects and parses names, emails, addresses, and usernames
          - **Custom Scrollbars**: Improved UI aesthetics with contextual scrollbar designs
          - **Legal Compliance Center**: Comprehensive terms, privacy, and ethics sections
          - **Enhanced OSINT Tools**: Added TorBot, Intelligence X, Nmap, Masscan, and Amass
          - **AI-Powered Investigation**: Intelligent analysis and search suggestions
          
          ### Technical Improvements
          - Cross-platform desktop builds (Windows, macOS, Linux)
          - Enhanced security and privacy features
          - Improved investigation workflow
          - Better error handling and validation
          - Performance optimizations
          
          ## 📦 Downloads
          
          ### Windows
          - **Setup (Recommended)**: `InfoScope-OSINT-Platform-v2.3.0-Setup-{version}-x64.exe`
          - **Portable**: `InfoScope-OSINT-Platform-v2.3.0-{version}-x64.exe`
          - **MSI Installer**: `InfoScope-OSINT-Platform-v2.3.0-{version}-x64.msi`
          
          ### macOS
          - **DMG (Intel)**: `InfoScope-OSINT-Platform-v2.3.0-{version}-x64.dmg`
          - **DMG (Apple Silicon)**: `InfoScope-OSINT-Platform-v2.3.0-{version}-arm64.dmg`
          
          ### Linux
          - **AppImage (Universal)**: `InfoScope-OSINT-Platform-v2.3.0-{version}-x64.AppImage`
          - **Debian Package**: `InfoScope-OSINT-Platform-v2.3.0-{version}-amd64.deb`
          - **RPM Package**: `InfoScope-OSINT-Platform-v2.3.0-{version}-x86_64.rpm`
          
          ## 🔒 Security
          
          All binaries are signed and include SHA256 checksums for verification.
          
          ## 🚀 Installation
          
          1. Download the appropriate package for your platform
          2. Verify the SHA256 checksum (recommended)
          3. Install using your platform's standard method
          4. Launch InfoScope OSINT Platform
          
          ## 📖 Documentation
          
          - [Build Guide](BUILD_GUIDE.md)
          - [User Manual](README.md)
          - [API Documentation](docs/API.md)
          
          ## 🐛 Known Issues
          
          - First launch may take longer due to initialization
          - Some antivirus software may flag the application (false positive)
          - macOS users may need to allow the app in Security & Privacy settings
          
          ## 🤝 Support
          
          - Report issues: [GitHub Issues](https://github.com/ivocreates/InfoScope/issues)
          - Contact: ivo@ivocreates.gmail.com
          - Website: https://ivocreates.site
          
          ---
          
          **License**: CC BY-SA 4.0 International  
          **Author**: Ivo Pereira  
          **Platform**: Cross-platform (Windows, macOS, Linux)
          EOF
          
          echo "Generated release notes"
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name || format('v{0}', env.APP_VERSION) }}
          name: ${{ env.APP_NAME }} v${{ env.APP_VERSION }}
          body_path: RELEASE_NOTES.md
          files: release/*
          draft: ${{ github.event.inputs.release_type == 'draft' }}
          prerelease: ${{ github.event.inputs.release_type == 'pre-release' || !startsWith(github.ref, 'refs/tags/') }}
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update latest release
        if: startsWith(github.ref, 'refs/tags/') && github.event.inputs.release_type == 'release'
        run: |
          echo "Latest release updated to ${{ github.ref_name }}"

  notify:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [create-release]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.create-release.result == 'success'
        run: |
          echo "✅ InfoScope OSINT Platform v${{ env.APP_VERSION }} build and release completed successfully!"
          
      - name: Notify failure
        if: needs.create-release.result == 'failure'
        run: |
          echo "❌ InfoScope OSINT Platform v${{ env.APP_VERSION }} build failed!"
          exit 1